package com.xerox.isp.volumereports;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collections;

import javax.ejb.Stateless;

//import servletBean.ReportOne;
import com.xerox.isp.volumereports.ReportOne;

/**
 * Session Bean implementation class VolumeReportBean
 */
@Stateless
public class VolumeReportBean implements VolumeReportBeanLocal {

	public static ArrayList<String> generateSolutionList(){//generates solution list for Report 1
		
		ArrayList<String> tempSolList = new ArrayList<String>();
		String unique_sol_query = "select distinct(SOLUTION_ID) from AUDIT_METRIC";
		
		try{
			Connection conne = DriverManager.getConnection("jdbc:oracle:thin:@usa7061lv1137.na.xerox.net:1532/ISPSVC", "ispaudit", "ISPu$a0300lvStg");
			Statement stmt = conne.createStatement();
			tempSolList = GrabDistinctSolutionList(unique_sol_query, stmt);
		}
		catch (SQLException e){
			e.printStackTrace();
		}
		return tempSolList;
	}//end of generateSolutionList

	public static ArrayList<String> generateComponentList(String solution){//generates component list for Report 1
		ArrayList<String> ListOfComponent_IDS = new ArrayList<String>();
		
		try{
			Connection conn_one = DriverManager.getConnection("jdbc:oracle:thin:@usa7061lv1137.na.xerox.net:1532/ISPSVC", "ispaudit", "ISPu$a0300lvStg");
			Statement stmt_one = conn_one.createStatement();
			ResultSet rs_one;	
	
			//Create SQL query
			String Query = "select distinct(COMPONENT_ID) from AUDIT_METRIC where SOLUTION_ID = '";
			Query+=solution;
			Query+="'";
			
			rs_one = stmt_one.executeQuery(Query);
			
			while ( rs_one.next() ){
				String add_this = rs_one.getString(1);
				ListOfComponent_IDS.add( add_this);
			}
		}
		catch (SQLException e){
			e.printStackTrace();
		}
		return ListOfComponent_IDS;
	}//end of generateComponentList
	
	public static ArrayList<String> generateYearList(String solution, String component){//generates year list for Report1 
		ArrayList<String> ListOfYears = new ArrayList<String>();
		try{
			Connection conn_one = DriverManager.getConnection("jdbc:oracle:thin:@usa7061lv1137.na.xerox.net:1532/ISPSVC", "ispaudit", "ISPu$a0300lvStg");
			Statement stmt_one = conn_one.createStatement();
			ResultSet rs_one;	

			//create SQL query
			String Query = "select min(to_char(metric_start_time, 'yyyy')) from audit_metric where solution_id = '";
			Query += solution;
			Query += "' and component_id ='";
			Query += component;
			Query += "' and metric_name = 'Daily_Entry_Count' group by to_char(METRIC_START_TIME,'yyyy')";
			
			rs_one = stmt_one.executeQuery(Query);
			
			while ( rs_one.next() ){
				String add_this = rs_one.getString(1);
				ListOfYears.add(add_this);
			}
			return ListOfYears;
		}

		catch (SQLException e){
			e.printStackTrace();
			return null;
		}
	}//end of generateYearList
	
	public static ArrayList<String> generateYearListForReport2(String solution){//generate syear list for Report2
		try{
			Connection conn_one = DriverManager.getConnection("jdbc:oracle:thin:@usa7061lv1137.na.xerox.net:1532/ISPSVC", "ispaudit", "ISPu$a0300lvStg");
			Statement stmt_one = conn_one.createStatement();
			ResultSet rs_one;	

			/*
			select min(to_char(metric_start_time, 'yyyy')) from audit_metric 
			where solution_id = 'S0224_YankeeSOFConfirmServiceESB'
			and METRIC_NAME = 'Daily_Entry_Count'
			group by to_char(METRIC_start_TIME,'yyyy')
			order by to_char(METRIC_start_TIME,'yyyy');
			*/
			String Query = "select min(to_char(metric_start_time, 'yyyy')) from audit_metric ";
			Query += "where solution_id = '";
			Query += solution;
			Query += "' and metric_name = 'Daily_Entry_Count' group by to_char(METRIC_start_TIME,'yyyy') order by to_char(METRIC_start_TIME,'yyyy')";
	
			rs_one = stmt_one.executeQuery(Query);
			ArrayList<String> ListOfYears2 = new ArrayList<String>();
		
			while ( rs_one.next() ){//loop through result set to grab the corresponding values
				String add_this = rs_one.getString(1);
				ListOfYears2.add(add_this);
			}
			return ListOfYears2;
		}

		catch (SQLException e){
			e.printStackTrace();
			return null;
		}
	}//end of generateYearListForReport2

	public static ArrayList<String> generateMonthList(String solution, String component, String year){//generates list of months for Report1
		try{
			Connection conn_one = DriverManager.getConnection("jdbc:oracle:thin:@usa7061lv1137.na.xerox.net:1532/ISPSVC", "ispaudit", "ISPu$a0300lvStg");
			Statement stmt_one = conn_one.createStatement();
			ResultSet rs_one;	

			//generate SQL query
			String Query = "select to_char(metric_start_time, 'mm') from audit_metric where solution_id = '";
			Query += solution;
			Query += "' and component_id ='";
			Query += component;
			Query += "' and METRIC_NAME = 'Daily_Entry_Count' and to_char(METRIC_START_TIME,'yyyy') = '";
			Query += year; 
			Query += "' group by to_char(METRIC_START_TIME,'mm')";

			rs_one = stmt_one.executeQuery(Query);
		
			ArrayList<String> ListOfMonths = new ArrayList<String>();
			while ( rs_one.next() ){//getting the list on 'mm' format ex: jun is: 06
				String add_this = rs_one.getString(1);
				ListOfMonths.add( add_this);
			}
			
			Collections.sort(ListOfMonths);//sort the numbers that are in 'mm' format
			return Convert2Month(ListOfMonths);//convert 'mm' format to months
		}
		catch (SQLException e){
			e.printStackTrace();
			return null;
		}
	}//end of generateMonthList
	
	public static ArrayList<String> generateMonthList2(String solution, String start_year){//generates list of months for Report2
		/*
		SELECT to_char(metric_start_time, 'mm')
		FROM audit_metric
		WHERE solution_id = 'S0224_YankeeSOFConfirmServiceESB'
		AND metric_name = 'Daily_Entry_Count'
		AND to_char(METRIC_START_TIME, 'yyyy') = '2015'
		GROUP BY to_char(METRIC_start_TIME, 'mm')
		ORDER BY to_char(METRIC_start_TIME, 'mm')
		*/
		try{
			Connection conn_one = DriverManager.getConnection("jdbc:oracle:thin:@usa7061lv1137.na.xerox.net:1532/ISPSVC", "ispaudit", "ISPu$a0300lvStg");
			Statement stmt_one = conn_one.createStatement();
			ResultSet rs_one;	

			//form sql query
			String Query = "select to_char(metric_start_time, 'mm') from audit_metric where solution_id = '";
			Query += solution;
			Query += "' and metric_name = 'Daily_Entry_Count' and to_char(metric_start_time, 'yyyy') = '";
			Query += start_year;
			Query += "' group by to_char(metric_start_time, 'mm') order by to_char(metric_start_time, 'mm')";

			rs_one = stmt_one.executeQuery(Query);
		
			ArrayList<String> ListOfMonths = new ArrayList<String>();
			while ( rs_one.next() ){//getting the list in 'mm' format ex: jun is: 06
				String add_this = rs_one.getString(1);
				ListOfMonths.add( add_this);
			}
			
			Collections.sort(ListOfMonths);//sort the numbers that are in 'mm' format
			return Convert2Month(ListOfMonths);//convert 'mm' format to months
		}
		catch (SQLException e){
			e.printStackTrace();
			return null;
		}
	}//end of generateMonthList2
	
	public static ArrayList<ReportOne> generateReportOne(String solution_id, String component_id, String year_start, String month_start){
		try{
			Connection conn_one = DriverManager.getConnection("jdbc:oracle:thin:@usa7061lv1137.na.xerox.net:1532/ISPSVC", "ispaudit", "ISPu$a0300lvStg");
			Statement stmt_one = conn_one.createStatement();
			ResultSet rs_one;	
			
			String NiceDate_one = TurnToNiceDateStart(month_start, year_start);//returns a  date in this format, including the ', ('01-JAN-2015')

			String Query_one = CreateSqlQueryReport1(solution_id, component_id, NiceDate_one);//calls helper function to create the SQL query
			rs_one = stmt_one.executeQuery(Query_one);

			ArrayList<ReportOne> ReportOneList = new ArrayList<ReportOne>();
			while (rs_one.next()) {
				ReportOne tempReportOne = new ReportOne();
				tempReportOne.setSOLUTION_ID(rs_one.getString(1));
				tempReportOne.setCOMPONENT_ID(rs_one.getString(2));
				tempReportOne.setDATE(rs_one.getString(3));
				tempReportOne.setREQUEST_COUNT(rs_one.getString(4));

				ReportOneList.add(tempReportOne);
			}
		
			conn_one.close();
			return ReportOneList;
		}
		catch (SQLException e){
			e.printStackTrace();
			return null;
		}
	}//end of generateReportOne
	
public static ArrayList<ReportTwo> generateReportTwo(String solution, String year_start, String month_start, String year_end, String month_end){
		try{
			Connection conne = DriverManager.getConnection("jdbc:oracle:thin:@usa7061lv1137.na.xerox.net:1532/ISPSVC", "ispaudit", "ISPu$a0300lvStg");
			Statement stmt = conne.createStatement();
			ResultSet rs;

			String StartDate = TurnToNiceDateStart(month_start, year_start);//returns a  date in this format, including the ', ('01-JAN-2015')
			String EndDate = TurnToNiceDateEnd(month_end, year_end, stmt);//returns a  date in this format, including the ', ('01-JAN-2015')
 
			String Query = CreateSqlQueryReport2(solution, StartDate, EndDate);//calls helper function to create the SQL query
			rs = stmt.executeQuery(Query);

			//populating reportOneList
			ArrayList<ReportTwo> TwoList = new ArrayList<ReportTwo>();
			while (rs.next()) {
				ReportTwo tempReportTwo = new ReportTwo();
				tempReportTwo.setSOLUTION_ID(rs.getString(1));
				tempReportTwo.setDATE(rs.getString(2));
				tempReportTwo.setREQUEST_COUNT(rs.getString(3));
				TwoList.add(tempReportTwo); //added it to the big list
			}
	
			conne.close();
			return TwoList;
		}
		catch (SQLException e){
			e.printStackTrace(); 
			return null;
		}
	}//end of generateReportTwo less parameters


   	private static ArrayList<String> GrabDistinctSolutionList(String Query, Statement stmt) {//helper function to grab list of solution_ids 
		try {
			ResultSet rs_loop = stmt.executeQuery(Query);
			ArrayList<String> Temp = new ArrayList<String>();
			
			while (rs_loop.next()) {
				String tempString = rs_loop.getString(1);
				if (tempString != null) {
					Temp.add(tempString);
				}
			}
			Collections.sort(Temp, String.CASE_INSENSITIVE_ORDER);//sort the solution ids
			return Temp;
		}
		catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}//end of GrabDistinctForColumns

   	//helper function
	private static String TurnToNiceDateStart(String month, String year) {
		// Given a month and year, it will turn into this format, ex:
		// '01-JAN-2015'
		String NiceDate = "'01-";
		NiceDate += month;
		NiceDate += "-";
		NiceDate += year;
		NiceDate += "'";
		return NiceDate;
	}

	//helper function
	private static String TurnToNiceDateEnd(String month, String year, Statement stmt) {
		// Given a month and year, it will turn into this format, ex:
		// '01-JAN-2015'

//		SELECT unique(LAST_DAY('1-Jun-2015')) from audit_metric 
		String Query = "SELECT unique(LAST_DAY('1-";
		Query += month + "-";
		Query += year +"'";
		Query += ")) from audit_metric";
		
		try{
			String result = null;
			ResultSet rs = stmt.executeQuery(Query);
			while (rs.next()){
				result = rs.getString(1);
				//the result is in this example format:'2015-06-30 00:00:00'
			}
			
			//Now that you have the last date of the corresponding month and year, just concatenate
			String day = result.substring(result.lastIndexOf("-")+1, result.indexOf(" "));
			String NiceDate = "'"  + day + "-" + month + "-" + year + "'";
			return NiceDate;
		}
		catch(SQLException e){
			e.printStackTrace();
			return null;
		}
	}

	//helper functions
	private static String CreateSqlQueryReport1(String Solution_id, String Component_id, String NiceDate) { // NiceDate is in '01-JAN-2015' format
		/*
		 * select SOLUTION_ID, COMPONENT_ID, to_char(METRIC_END_TIME,'yyyy-mm')
		 * as MONTH, sum(METRIC_VALUE) as REQUEST_COUNT from AUDIT_METRIC where
		 * METRIC_START_TIME >= '01-JAN-2015' and METRIC_END_TIME <= (SYSDATE)
		 * and SOLUTION_ID = 'S0228_CrmInquiryServiceWeb' and COMPONENT_ID =
		 * 'getHistory' and METRIC_NAME = 'Daily_Entry_Count' group by
		 * SOLUTION_ID, COMPONENT_ID, to_char(METRIC_END_TIME,'yyyy-mm') order
		 * by SOLUTION_ID, COMPONENT_ID, to_char(METRIC_END_TIME,'yyyy-mm')
		 */
		String SqlQuery = "select SOLUTION_ID, COMPONENT_ID, to_char(METRIC_END_TIME,'yyyy-mm') as MONTH, sum(METRIC_VALUE) as REQUEST_COUNT from AUDIT_METRIC";
		SqlQuery += " where METRIC_START_TIME >= ";
		SqlQuery += NiceDate;// add the start date
		SqlQuery += " and METRIC_END_TIME <= (SYSDATE) and SOLUTION_ID = '";
		SqlQuery += Solution_id; //add the solution id
		SqlQuery += "' and COMPONENT_ID = '";
		SqlQuery += Component_id; // add the component id
		SqlQuery += "' and METRIC_NAME = 'Daily_Entry_Count' group by SOLUTION_ID, COMPONENT_ID, to_char(METRIC_END_TIME,'yyyy-mm') order by";
		SqlQuery += " SOLUTION_ID, COMPONENT_ID, to_char(METRIC_END_TIME,'yyyy-mm')";
		return SqlQuery;
	}

	//helper function
	private static String CreateSqlQueryReport2(String Solution_id, String NiceDate_start, String NiceDate_end) { // NiceDate is in '01-JAN-2015' format
		/* REPORT TWO
		select SOLUTION_ID, to_char(METRIC_END_TIME,'yyyy-mm') as MONTH, sum(METRIC_VALUE) as REQUEST_COUNT
		from AUDIT_METRIC
		where METRIC_START_TIME >= '01-JAN-2014'
		and METRIC_END_TIME <= '31-DEC-2014'
		and SOLUTION_ID = 'S0228_CrmInquiryServiceWeb'
		and METRIC_NAME = 'Daily_Entry_Count'
		group by SOLUTION_ID, to_char(METRIC_END_TIME,'yyyy-mm')
		order by SOLUTION_ID, to_char(METRIC_END_TIME,'yyyy-mm');
		*/

		String SqlQuery = "select SOLUTION_ID, to_char(METRIC_END_TIME,'yyyy-mm') as MONTH, sum(METRIC_VALUE) as REQUEST_COUNT from AUDIT_METRIC";
		SqlQuery += " where METRIC_START_TIME >= ";
		SqlQuery += NiceDate_start; // add the start date
		SqlQuery += " and METRIC_END_TIME <= ";
		SqlQuery += NiceDate_end; //add the end date
		SqlQuery += " and SOLUTION_ID = '";
		SqlQuery += Solution_id; //add the solution id
		SqlQuery += "' and METRIC_NAME = 'Daily_Entry_Count' group by SOLUTION_ID, to_char(METRIC_END_TIME,'yyyy-mm') order by";
		SqlQuery += " SOLUTION_ID, to_char(METRIC_END_TIME,'yyyy-mm')";
		return SqlQuery;
	}
	
	private static ArrayList<String> Convert2Month(ArrayList<String> ListOfMonths){//converts an array of Strings of numbers to their corresponding months
		ArrayList<String> ReturnThis = new ArrayList<String>();
		for (int i = 0; i < ListOfMonths.size(); i++) {
			if (ListOfMonths.get(i).equals("01")) {
				ReturnThis.add("JAN");
			}
			else if (ListOfMonths.get(i).equals("02")) {
				ReturnThis.add("FEB");
			}
			else if (ListOfMonths.get(i).equals("03")) {
				ReturnThis.add("MAR");
			}
			else if (ListOfMonths.get(i).equals("04")) {
				ReturnThis.add("APR");
			}
			else if (ListOfMonths.get(i).equals("05")) {
				ReturnThis.add("MAY");
			}
			else if (ListOfMonths.get(i).equals("06")) {
				ReturnThis.add("JUN");
			}
			else if (ListOfMonths.get(i).equals("07")) {
				ReturnThis.add("JUL");
			}
			else if (ListOfMonths.get(i).equals("08")) {
				ReturnThis.add("AUG");
			}
			else if (ListOfMonths.get(i).equals("09")) {
				ReturnThis.add("SEP");
			}
			else if (ListOfMonths.get(i).equals("10")) {
				ReturnThis.add("OCT");
			}
			else if (ListOfMonths.get(i).equals("11")) {
				ReturnThis.add("NOV");
			}
			else {
				ReturnThis.add("DEC");
			}
		}//end of for loop
		return ReturnThis;
	}//end of function
	
}
